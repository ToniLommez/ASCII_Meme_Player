package main

import (
	"encoding/gob"
	"fmt"
	"image"
	_ "image/png" // Registra o decodificador PNG
	"os"
	"strconv"
	"strings"
)

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func splitTiles2(matrix [][]uint8, Xs int, Ys int) [][][]uint8 {
	rows := len(matrix)
	cols := len(matrix[0])

	var tiles [][][]uint8

	for i := 0; i < rows; i += Ys {
		for j := 0; j < cols; j += Xs {
			tileRows := min(Ys, rows-i)
			tileCols := min(Xs, cols-j)

			tile := make([][]uint8, 4) // 4 linhas
			for y := 0; y < 4; y++ {
				tile[y] = make([]uint8, 2) // 2 colunas
				for x := 0; x < 2; x++ {
					if y < tileRows && x < tileCols {
						tile[y][x] = matrix[i+y][j+x]
					} else {
						tile[y][x] = 0 // Preencha com algum valor padrão ou lógica adequada
					}
				}
			}

			tiles = append(tiles, tile)
		}
	}

	return tiles
}

func mapChar(tile [][]uint8) rune {
	binary := ""
	binary += discretize(tile[3][1])
	binary += discretize(tile[3][0])
	binary += discretize(tile[2][1])
	binary += discretize(tile[1][1])
	binary += discretize(tile[0][1])
	binary += discretize(tile[2][0])
	binary += discretize(tile[1][0])
	binary += discretize(tile[0][0])

	base := 0x2800
	decimalValue, _ := strconv.ParseInt(binary, 2, 0)
	return rune(base + int(decimalValue))
}

func discretize(v uint8) string {
	if v == 1 {
		return "1"
	} else {
		return "0"
	}
}

func generate(filepath string, threshold int) string {

	frame := ""
	if !(strings.HasSuffix(filepath, ".png") ||
		strings.HasSuffix(filepath, ".jpg") ||
		strings.HasSuffix(filepath, ".jpeg")) {
		return ""
	}
	matrix := ImgToMat(filepath, threshold)
	X := 2
	Y := 4

	//startTime := time.Now()
	tiles := splitTiles2(matrix, X, Y)
	//elapsedTime := time.Since(startTime)
	//fmt.Println(elapsedTime)
	var letras []rune

	for _, tile := range tiles {
		letras = append(letras, mapChar(tile))
	}

	cols := len(matrix[0]) / X
	chars := len(letras)
	for i := 0; i < chars; i += cols {
		end := i + cols
		if end > chars {
			end = chars
		}

		frame += (string(letras[i:end]) + "\n")
	}

	return frame
}

func loadImage(filePath string, threshold int) ([][]uint8, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return nil, err
	}

	defer file.Close()

	img, _, err := image.Decode(file)
	if err != nil {
		return nil, err
	}

	bounds := img.Bounds()
	width, height := bounds.Max.X, bounds.Max.Y

	matrix := make([][]uint8, height)
	for y := 0; y < height; y++ {
		matrix[y] = make([]uint8, width)
		for x := 0; x < width; x++ {
			r, _, _, _ := img.At(x, y).RGBA()
			grayValue := uint8((r + r + r) / 3)
			if grayValue > uint8(threshold) {
				matrix[y][x] = 0
			} else {
				matrix[y][x] = 1
			}
		}
	}

	return matrix, nil
}

func extendMatrix(matrix [][]uint8) [][]uint8 {
	rows := len(matrix)
	cols := len(matrix[0])

	extraRows := (4 - rows%4) % 4
	extraCols := (2 - cols%2) % 2

	nRows, nCols := rows+extraRows, cols+extraCols

	nMatrix := make([][]uint8, nRows)
	for i := range nMatrix {
		nMatrix[i] = make([]uint8, nCols)
	}

	for y := 0; y < rows; y++ {
		for x := 0; x < cols; x++ {
			nMatrix[y][x] = matrix[y][x]
		}
	}

	return nMatrix
}

func ImgToMat(imagePath string, threshold int) [][]uint8 {
	matrix, err := loadImage(imagePath, threshold)
	if err != nil {
		return nil
	}
	return extendMatrix(matrix)
}

func trimFrame(frame string, x, y int) string {
	lines := strings.Split(frame, "\n")
	trimmedLines := make([]string, len(lines))

	for idx, line := range lines {
		start := x
		end := len(line) - y

		// Verifique se os índices são válidos
		if start < 0 {
			start = 0
		}
		if end > len(line) {
			end = len(line)
		}
		if start < end {
			trimmedLines[idx] = line[start:end]
		} else {
			trimmedLines[idx] = "" // ou você pode omitir esta linha
		}
	}
	return strings.Join(trimmedLines, "\n")
}

func saveFrames(frames []string, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := gob.NewEncoder(file)
	return encoder.Encode(frames)
}

func main() {
	const cursorReset = "\033[H"

	var path string
	var video []string

	for i := 7; i < 68; i++ {
		path = fmt.Sprintf("cow/%d.png", i)
		video = append(video, trimFrame(generate(path, 128), 30, 30))
	}

	saveFrames(video, "cow.gob")
}
